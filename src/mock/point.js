import { CITIES } from '../const';
import { getRandomElement, getRandomPositiveInteger } from './utils';
import { mockDestination } from './destination';
import { mockOffers } from './offer';
const mockPoint = [
  {
    id: crypto.randomUUID(),
    price: getRandomPositiveInteger(),
    dateFrom: new Date('2023-09-25T08:30'),
    dateTo: new Date('2023-09-25T10:30'),
    name: getRandomElement(CITIES),
    destination: getRandomElement(mockDestination),
    isFavorite: true,
    type: 'Taxi',
    offers: Array.from({ length: getRandomPositiveInteger(0, mockOffers.filter((item) => item.types.includes('Taxi')).length) }, () => getRandomElement(mockOffers.filter((item) => item.types.includes('Taxi')))),
  },
  {
    id: crypto.randomUUID(),
    price: getRandomPositiveInteger(),
    dateFrom: new Date('2023-09-25T12:00'),
    dateTo: new Date('2023-09-25T15:30'),
    name: getRandomElement(CITIES),
    destination: getRandomElement(mockDestination),
    isFavorite: false,
    type: 'Bus',
    offers: Array.from({ length: getRandomPositiveInteger(0, mockOffers.filter((item) => item.types.includes('Bus')).length) }, () => getRandomElement(mockOffers.filter((item) => item.types.includes('Bus')))),
  },
  {
    id: crypto.randomUUID(),
    price: getRandomPositiveInteger(),
    dateFrom: new Date('2023-09-28T18:00'),
    dateTo: new Date('2023-09-28T20:00'),
    name: getRandomElement(CITIES),
    destination: getRandomElement(mockDestination),
    isFavorite: true,
    type: 'Train',
    offers: Array.from({ length: getRandomPositiveInteger(0, mockOffers.filter((item) => item.types.includes('Train')).length) }, () => getRandomElement(mockOffers.filter((item) => item.types.includes('Train')))),
  },
  {
    id: crypto.randomUUID(),
    price: getRandomPositiveInteger(),
    dateFrom: new Date('2023-09-26T09:00'),
    dateTo: new Date('2023-09-26T14:30'),
    name: getRandomElement(CITIES),
    destination: getRandomElement(mockDestination),
    isFavorite: true,
    type: 'Ship',
    offers: Array.from({ length: getRandomPositiveInteger(0, mockOffers.filter((item) => item.types.includes('Ship')).length) }, () => getRandomElement(mockOffers.filter((item) => item.types.includes('Ship')))),
  },
  {
    id: crypto.randomUUID(),
    price: getRandomPositiveInteger(),
    dateFrom: new Date('2023-09-26T15:00'),
    dateTo: new Date('2023-09-26T17:30'),
    name: getRandomElement(CITIES),
    destination: getRandomElement(mockDestination),
    isFavorite: false,
    type: 'Drive',
    offers: Array.from({ length: getRandomPositiveInteger(0, mockOffers.filter((item) => item.types.includes('Drive')).length) }, () => getRandomElement(mockOffers.filter((item) => item.types.includes('Drive')))),
  },
  {
    id: crypto.randomUUID(),
    price: getRandomPositiveInteger(),
    dateFrom: new Date('2023-09-27T19:30'),
    dateTo: new Date('2023-09-28T21:30'),
    name: getRandomElement(CITIES),
    destination: getRandomElement(mockDestination),
    isFavorite: true,
    type: 'Check-in',
    offers: Array.from({ length: getRandomPositiveInteger(0, mockOffers.filter((item) => item.types.includes('Check-in')).length) }, () => getRandomElement(mockOffers.filter((item) => item.types.includes('Check-in')))),
  },
  {
    id: crypto.randomUUID(),
    price: getRandomPositiveInteger(),
    dateFrom: new Date('2023-09-27T19:30'),
    dateTo: new Date('2023-09-28T21:30'),
    name: getRandomElement(CITIES),
    destination: getRandomElement(mockDestination),
    isFavorite: true,
    type: 'Sightseeing',
    offers: Array.from({ length: getRandomPositiveInteger(0, mockOffers.filter((item) => item.types.includes('Sightseeing')).length) }, () => getRandomElement(mockOffers.filter((item) => item.types.includes('Sightseeing')))),
  },
  {
    id: crypto.randomUUID(),
    price: getRandomPositiveInteger(),
    dateFrom: new Date('2023-09-27T19:30'),
    dateTo: new Date('2023-09-28T21:30'),
    name: getRandomElement(CITIES),
    destination: getRandomElement(mockDestination),
    isFavorite: true,
    type: 'Restaurant',
    offers: Array.from({ length: getRandomPositiveInteger(0, mockOffers.filter((item) => item.types.includes('Restaurant')).length) }, () => getRandomElement(mockOffers.filter((item) => item.types.includes('Restaurant')))),
  },
  {
    id: crypto.randomUUID(),
    price: getRandomPositiveInteger(),
    dateFrom: new Date('2023-09-27T19:30'),
    dateTo: new Date('2023-09-28T21:30'),
    name: getRandomElement(CITIES),
    destination: getRandomElement(mockDestination),
    isFavorite: true,
    type: 'Flight',
    offers: Array.from({ length: getRandomPositiveInteger(0, mockOffers.filter((item) => item.types.includes('Flight')).length) }, () => getRandomElement(mockOffers.filter((item) => item.types.includes('Flight')))),
  },
];

export { mockPoint };
